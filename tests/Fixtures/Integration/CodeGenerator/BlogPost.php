<?php

namespace Contentful\Tests\Management\Fixtures\Integration\CodeGenerator;

use Contentful\Core\Api\DateTimeImmutable;
use Contentful\Core\Api\Link;
use Contentful\Core\Resource\ResourceInterface;
use Contentful\Management\Resource\Asset;
use Contentful\Management\Resource\Entry;

/**
 * BlogPost class.
 *
 * This class was autogenerated.
 */
class BlogPost extends Entry
{
    /**
     * BlogPost constructor.
     */
    public function __construct()
    {
        parent::__construct('blogPost');
    }

    /**
     * Returns the "title" field.
     *
     * @param string $locale
     *
     * @return string|null
     */
    public function getTitle(string $locale = 'en-US')
    {
        return $this->getField('title', $locale);
    }

    /**
     * Sets the "title" field.
     *
     * @param string      $locale
     * @param string|null $value
     *
     * @return static
     */
    public function setTitle(string $locale = 'en-US', string $value = null)
    {
        return $this->setField('title', $locale, $value);
    }

    /**
     * Returns the "isPublished" field.
     *
     * @param string $locale
     *
     * @return bool|null
     */
    public function getIsPublished(string $locale = 'en-US')
    {
        return $this->getField('isPublished', $locale);
    }

    /**
     * Sets the "isPublished" field.
     *
     * @param string    $locale
     * @param bool|null $value
     *
     * @return static
     */
    public function setIsPublished(string $locale = 'en-US', bool $value = null)
    {
        return $this->setField('isPublished', $locale, $value);
    }

    /**
     * Returns the "publishedAt" field.
     *
     * @param string $locale
     *
     * @return DateTimeImmutable|null
     */
    public function getPublishedAt(string $locale = 'en-US')
    {
        return $this->getField('publishedAt', $locale);
    }

    /**
     * Sets the "publishedAt" field.
     *
     * @param string                 $locale
     * @param DateTimeImmutable|null $value
     *
     * @return static
     */
    public function setPublishedAt(string $locale = 'en-US', DateTimeImmutable $value = null)
    {
        return $this->setField('publishedAt', $locale, $value);
    }

    /**
     * Returns the "previous" field.
     *
     * @param string $locale
     *
     * @return Link|null
     */
    public function getPrevious(string $locale = 'en-US')
    {
        return $this->getField('previous', $locale);
    }

    /**
     * Sets the "previous" field.
     *
     * @param string    $locale
     * @param Link|null $value
     *
     * @return static
     */
    public function setPrevious(string $locale = 'en-US', Link $value = null)
    {
        return $this->setField('previous', $locale, $value);
    }

    /**
     * Returns the resolved "previous" link.
     *
     * @param string $locale
     *
     * @return BlogPost
     */
    public function resolvePreviousLink(string $locale = 'en-US')
    {
        return $this->proxy->resolveLink($this->getField('previous', $locale));
    }

    /**
     * Returns the "heroImage" field.
     *
     * @param string $locale
     *
     * @return Link|null
     */
    public function getHeroImage(string $locale = 'en-US')
    {
        return $this->getField('heroImage', $locale);
    }

    /**
     * Sets the "heroImage" field.
     *
     * @param string    $locale
     * @param Link|null $value
     *
     * @return static
     */
    public function setHeroImage(string $locale = 'en-US', Link $value = null)
    {
        return $this->setField('heroImage', $locale, $value);
    }

    /**
     * Returns the resolved "heroImage" link.
     *
     * @param string $locale
     *
     * @return Asset
     */
    public function resolveHeroImageLink(string $locale = 'en-US')
    {
        return $this->proxy->resolveLink($this->getField('heroImage', $locale));
    }

    /**
     * Returns the "randomEntry" field.
     *
     * @param string $locale
     *
     * @return Link|null
     */
    public function getRandomEntry(string $locale = 'en-US')
    {
        return $this->getField('randomEntry', $locale);
    }

    /**
     * Sets the "randomEntry" field.
     *
     * @param string    $locale
     * @param Link|null $value
     *
     * @return static
     */
    public function setRandomEntry(string $locale = 'en-US', Link $value = null)
    {
        return $this->setField('randomEntry', $locale, $value);
    }

    /**
     * Returns the resolved "randomEntry" link.
     *
     * @param string $locale
     *
     * @return ResourceInterface
     */
    public function resolveRandomEntryLink(string $locale = 'en-US')
    {
        return $this->proxy->resolveLink($this->getField('randomEntry', $locale));
    }

    /**
     * Returns the "misc" field.
     *
     * @param string $locale
     *
     * @return mixed|null
     */
    public function getMisc(string $locale = 'en-US')
    {
        return $this->getField('misc', $locale);
    }

    /**
     * Sets the "misc" field.
     *
     * @param string     $locale
     * @param mixed|null $value
     *
     * @return static
     */
    public function setMisc(string $locale = 'en-US', $value = null)
    {
        return $this->setField('misc', $locale, $value);
    }

    /**
     * Returns the "body" field.
     *
     * @param string $locale
     *
     * @return string|null
     */
    public function getBody(string $locale = 'en-US')
    {
        return $this->getField('body', $locale);
    }

    /**
     * Sets the "body" field.
     *
     * @param string      $locale
     * @param string|null $value
     *
     * @return static
     */
    public function setBody(string $locale = 'en-US', string $value = null)
    {
        return $this->setField('body', $locale, $value);
    }

    /**
     * Returns the "minimumAge" field.
     *
     * @param string $locale
     *
     * @return int|null
     */
    public function getMinimumAge(string $locale = 'en-US')
    {
        return $this->getField('minimumAge', $locale);
    }

    /**
     * Sets the "minimumAge" field.
     *
     * @param string   $locale
     * @param int|null $value
     *
     * @return static
     */
    public function setMinimumAge(string $locale = 'en-US', int $value = null)
    {
        return $this->setField('minimumAge', $locale, $value);
    }

    /**
     * Returns the "location" field.
     *
     * @param string $locale
     *
     * @return float[]|null
     */
    public function getLocation(string $locale = 'en-US')
    {
        return $this->getField('location', $locale);
    }

    /**
     * Sets the "location" field.
     *
     * @param string       $locale
     * @param float[]|null $value
     *
     * @return static
     */
    public function setLocation(string $locale = 'en-US', array $value = null)
    {
        return $this->setField('location', $locale, $value);
    }

    /**
     * Returns the "rating" field.
     *
     * @param string $locale
     *
     * @return float|null
     */
    public function getRating(string $locale = 'en-US')
    {
        return $this->getField('rating', $locale);
    }

    /**
     * Sets the "rating" field.
     *
     * @param string     $locale
     * @param float|null $value
     *
     * @return static
     */
    public function setRating(string $locale = 'en-US', float $value = null)
    {
        return $this->setField('rating', $locale, $value);
    }

    /**
     * Returns the "images" field.
     *
     * @param string $locale
     *
     * @return Link[]|null
     */
    public function getImages(string $locale = 'en-US')
    {
        return $this->getField('images', $locale);
    }

    /**
     * Sets the "images" field.
     *
     * @param string      $locale
     * @param Link[]|null $value
     *
     * @return static
     */
    public function setImages(string $locale = 'en-US', array $value = null)
    {
        return $this->setField('images', $locale, $value);
    }

    /**
     * Returns an array of resolved "images" links.
     *
     * @param string $locale
     *
     * @return Asset[]
     */
    public function resolveImagesLinks(string $locale = 'en-US')
    {
        return \array_map(function (Link $link) {
            return $this->proxy->resolveLink($link);
        }, (array) $this->getField('images', $locale));
    }

    /**
     * Returns the "related" field.
     *
     * @param string $locale
     *
     * @return Link[]|null
     */
    public function getRelated(string $locale = 'en-US')
    {
        return $this->getField('related', $locale);
    }

    /**
     * Sets the "related" field.
     *
     * @param string      $locale
     * @param Link[]|null $value
     *
     * @return static
     */
    public function setRelated(string $locale = 'en-US', array $value = null)
    {
        return $this->setField('related', $locale, $value);
    }

    /**
     * Returns an array of resolved "related" links.
     *
     * @param string $locale
     *
     * @return BlogPost[]
     */
    public function resolveRelatedLinks(string $locale = 'en-US')
    {
        return \array_map(function (Link $link) {
            return $this->proxy->resolveLink($link);
        }, (array) $this->getField('related', $locale));
    }

    /**
     * Returns the "tags" field.
     *
     * @param string $locale
     *
     * @return string[]|null
     */
    public function getTags(string $locale = 'en-US')
    {
        return $this->getField('tags', $locale);
    }

    /**
     * Sets the "tags" field.
     *
     * @param string        $locale
     * @param string[]|null $value
     *
     * @return static
     */
    public function setTags(string $locale = 'en-US', array $value = null)
    {
        return $this->setField('tags', $locale, $value);
    }
}
