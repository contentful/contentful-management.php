<?php

/**
 * This file is part of the contentful-management.php package.
 *
 * @copyright 2015-2017 Contentful GmbH
 * @license   MIT
 */

namespace Contentful\Management;

use Contentful\Client as BaseClient;
use Contentful\Link;
use Contentful\Management\Proxy\BaseProxy;
use Contentful\Management\Resource\ResourceInterface;
use Contentful\ResourceArray;

/**
 * Client class.
 *
 * This class is responsible for querying Contentful's Content Management API.
 *
 * @property Proxy\Asset $asset
 * @property Proxy\ContentType $contentType
 * @property Proxy\ContentTypeSnapshot $contentTypeSnapshot
 * @property Proxy\DeliveryApiKey $deliveryApiKey
 * @property Proxy\EditorInterface $editorInterface
 * @property Proxy\Entry $entry
 * @property Proxy\EntrySnapshot $entrySnapshot
 * @property Proxy\Locale $locale
 * @property Proxy\Organization $organization
 * @property Proxy\PersonalAccessToken $personalAccessToken
 * @property Proxy\PreviewApiKey $previewApiKey
 * @property Proxy\PublishedContentType $publishedContentType
 * @property Proxy\Role $role
 * @property Proxy\Space $space
 * @property Proxy\SpaceMembership $spaceMembership
 * @property Proxy\Upload $upload
 * @property Proxy\User $user
 * @property Proxy\Webhook $webhook
 * @property Proxy\WebhookCall $webhookCall
 * @property Proxy\WebhookHealth $webhookHealth
 */
class Client extends BaseClient
{
    /**
     * The current version of the SDK.
     *
     * @var string
     */
    const VERSION = '0.6.0-dev';

    /**
     * The default URI to which all requests should be made.
     *
     * @var string
     */
    const URI_MANAGEMENT = 'https://api.contentful.com';

    /**
     * The special URI for uploading files.
     *
     * @var string
     */
    const URI_UPLOAD = 'https://upload.contentful.com';

    /**
     * A list of registered proxies.
     *
     * @var string[]
     */
    private static $proxyMap = [
        'asset' => 'Asset',
        'contenttype' => 'ContentType',
        'contenttypesnapshot' => 'ContentTypeSnapshot',
        'deliveryapikey' => 'DeliveryApiKey',
        'editorinterface' => 'EditorInterface',
        'entry' => 'Entry',
        'entrysnapshot' => 'EntrySnapshot',
        'locale' => 'Locale',
        'organization' => 'Organization',
        'personalaccesstoken' => 'PersonalAccessToken',
        'previewapikey' => 'PreviewApiKey',
        'publishedcontenttype' => 'PublishedContentType',
        'role' => 'Role',
        'space' => 'Space',
        'spacemembership' => 'SpaceMembership',
        'upload' => 'Upload',
        'user' => 'User',
        'webhook' => 'Webhook',
        'webhookcall' => 'WebhookCall',
        'webhookhealth' => 'WebhookHealth',
    ];

    /**
     * A ResourceBuilder instance,
     * which is responsible for converting API responses into PHP objects.
     *
     * @var ResourceBuilder
     */
    private $builder;

    /**
     * The space ID to which this client is currently bound.
     *
     * @var string|null
     */
    private $currentSpaceId;

    /**
     * Client constructor.
     *
     * @param string      $token          A oauth token or personal access token generated by Contentful
     * @param string|null $currentSpaceId Optionally, the default space ID for querying operations
     * @param array       $options        An array of options, with the following supported values:
     *                                    - guzzle: an instance of the Guzzle client
     *                                    - logger: a logger implementing \Contentful\Log\LoggerInterface
     *                                    - uriOverride: a string that will replace the default Contentful URI
     *                                    - builder: a custom ResourceBuilder instance
     */
    public function __construct(string $token, string $currentSpaceId = null, array $options = [])
    {
        $api = 'MANAGEMENT';
        $guzzle = $options['guzzle'] ?? null;
        $logger = $options['logger'] ?? null;
        $baseUri = $options['uriOverride'] ?? self::URI_MANAGEMENT;

        parent::__construct($token, $baseUri, $api, $logger, $guzzle);

        $this->builder = $options['builder'] ?? new ResourceBuilder();
        $this->currentSpaceId = $currentSpaceId;
    }

    /**
     * Returns the active ResourceBuilder instance.
     *
     * @return ResourceBuilder
     */
    public function getBuilder(): ResourceBuilder
    {
        return $this->builder;
    }

    /**
     * Sets the active ResourceBuilder instance.
     *
     * @param ResourceBuilder $builder
     *
     * @return static
     */
    public function setBuilder(ResourceBuilder $builder)
    {
        $this->builder = $builder;

        return $this;
    }

    /**
     * Returns the space ID to which this client is currently bound.
     * It can be null, as certain operations are not done on a space level.
     *
     * @return string|null
     */
    public function getCurrentSpaceId()
    {
        return $this->currentSpaceId;
    }

    /**
     * Sets the space ID to which the client is currently bound.
     *
     * @param string|null $currentSpaceId
     *
     * @return static
     */
    public function setCurrentSpaceId(string $currentSpaceId = null)
    {
        $this->currentSpaceId = $currentSpaceId;

        return $this;
    }

    /**
     * Returns a proxy instance responsible for querying certain endpoints.
     *
     * @param string      $name    A valid proxy name, it will be resolved to a class in the namespace \Contentful\Management\Proxy
     * @param string|null $spaceId Optionally, a space ID required by proxies that query Contentful's endpoints on a space level
     *
     * @throws \InvalidArgumentException
     *
     * @return BaseProxy An object extending BaseProxy
     */
    public function getProxy(string $name, string $spaceId = null): BaseProxy
    {
        $normalizedName = strtolower($name);
        $spaceId = $spaceId ?: $this->currentSpaceId;

        if (!isset(self::$proxyMap[$normalizedName])) {
            throw new \InvalidArgumentException(sprintf(
                'Trying to access invalid proxy "%s".',
                $name
            ));
        }

        $class = '\\Contentful\\Management\\Proxy\\'.self::$proxyMap[$normalizedName];

        return new $class($this, $spaceId);
    }

    /**
     * Convenience method for accessing a proxy.
     * Allows for this usage.
     *
     * ``` php
     * $entry = $client->entries->get($entryId);
     * ```
     *
     * Attention: if no space ID is provided and the proxy requires one,
     * it will throw an exception.
     *
     * @param string $name
     *
     * @return BaseProxy An object extending BaseProxy
     *
     * @see Client::getProxy()
     */
    public function __get(string $name): BaseProxy
    {
        return $this->getProxy($name, $this->currentSpaceId);
    }

    /**
     * Makes a GET call to an API endpoint,
     * and returns the built object.
     *
     * @param string                 $uri      The API endpoint
     * @param Query|null             $query    Optionally, a \Contentful\Management\Query object defining query string parameters
     * @param array                  $options  An array of options for the HTTP client
     * @param ResourceInterface|null $resource If a resource object is given, its properties will be overwritten
     *
     * @return ResourceArray|ResourceInterface
     */
    public function getResource(string $uri, Query $query = null, array $options = [], ResourceInterface $resource = null)
    {
        $options['query'] = $query !== null
            ? $query->getQueryData()
            : [];

        $resource = $this->requestResource('GET', $uri, $options, $resource);

        return $resource;
    }

    /**
     * Requests an API resource and applies the result to the given object.
     *
     * @param string                 $method   The HTTP method
     * @param string                 $uri      The API endpoint
     * @param array                  $options  An array of options for the HTTP client
     * @param ResourceInterface|null $resource Optionally, an object whose properties will be overwritten
     */
    public function requestResource(string $method, string $uri, array $options = [], ResourceInterface $resource = null)
    {
        $uri = rtrim($uri, '/');

        $response = $this->request($method, $uri, $options);

        if ($response) {
            $resource = $this->builder->build($response, $resource);
        }

        return $resource;
    }

    /**
     * Resolves a Link object to the actual resource.
     *
     * @param Link        $link    A link object to a valid resource in Contentful
     * @param string|null $spaceId Optionally, a space ID to override the one currently in use
     *
     * @return ResourceInterface
     */
    public function resolveLink(Link $link, string $spaceId = null): ResourceInterface
    {
        $spaceId = $spaceId ?: $this->currentSpaceId;

        $linkMap = [
            'Asset' => 'asset',
            'ContentType' => 'contentType',
            'Entry' => 'entry',
            'PreviewApiKey' => 'previewApiKey',
            'Role' => 'role',
            'Space' => 'space',
            'Upload' => 'upload',
            'WebhookDefinition' => 'webhook',
        ];

        if (isset($linkMap[$link->getLinkType()])) {
            return $this->getProxy($linkMap[$link->getLinkType()])->get($link->getId());
        }

        throw new \InvalidArgumentException(sprintf(
            'Unexpected system type "%s" while trying to resolve a Link.',
            $link->getLinkType()
        ));
    }

    /**
     * {@inheritdoc}
     */
    protected function getSdkName(): string
    {
        return 'contentful-management.php/';
    }

    /**
     * {@inheritdoc}
     */
    protected function getSdkVersion(): string
    {
        return self::VERSION;
    }

    /**
     * {@inheritdoc}
     */
    protected function getApiContentType(): string
    {
        return 'application/vnd.contentful.management.v1+json';
    }

    /**
     * {@inheritdoc}
     */
    protected function getExceptionMap(): array
    {
        return array_merge(parent::getExceptionMap(), [
            'BadRequest' => Exception\BadRequestException::class,
            'DefaultLocaleNotDeletable' => Exception\DefaultLocaleNotDeletableException::class,
            'FallbackLocaleNotDeletable' => Exception\FallbackLocaleNotDeletableException::class,
            'FallbackLocaleNotRenameable' => Exception\FallbackLocaleNotRenameableException::class,
            'InternalServerError' => Exception\InternalServerErrorException::class,
            'MissingKey' => Exception\MissingKeyException::class,
            // Overrides the generic exception
            'RateLimitExceeded' => Exception\RateLimitExceededException::class,
            'UnknownKey' => Exception\UnknownKeyException::class,
            'UnsupportedMediaType' => Exception\UnsupportedMediaTypeException::class,
            'ValidationFailed' => Exception\ValidationFailedException::class,
            'VersionMismatch' => Exception\VersionMismatchException::class,
        ]);
    }
}
